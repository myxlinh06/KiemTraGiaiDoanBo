# app.py
import streamlit as st
import requests
import pandas as pd
import threading
import uvicorn
from fastapi import FastAPI, Query
from pymongo import MongoClient
from datetime import datetime
from giaidoanbo import classify_cow, stage_map, get_age_days

# ================== CONFIG ==================
MONGO_CONNECTIONS = {
    "Server Test": "mongodb://root:tgx2025@103.48.84.200:27017/",
    "Server Dev": "mongodb://admin:tgx2025@103.48.84.199:27017/?authSource=admin",
}

DB_NAME = "QuanLyTrangTraiDb"

TRAI_COLLECTIONS = {
    "Tr·∫°i IA PUCH": "BoNhapTrai",
    "Tr·∫°i EA H'LEO": "BoNhapTrai_1",
    "Tr·∫°i AD1": "BoNhapTrai_2",
    "Tr·∫°i ERC": "BoNhapTrai_3",
    "Tr·∫°i BSA": "BoNhapTrai_4",
}

# ========== FASTAPI APP ==========
api_app = FastAPI(title="üêÑ API Ph√¢n lo·∫°i giai ƒëo·∫°n b√≤")

# Cache Mongo client connections
mongo_clients = {}

def get_collection(server_name: str, collection_name: str):
    if server_name not in mongo_clients:
        conn_str = MONGO_CONNECTIONS[server_name]
        mongo_clients[server_name] = MongoClient(conn_str, serverSelectionTimeoutMS=10000)
    client = mongo_clients[server_name]
    return client[DB_NAME][collection_name]

@api_app.get("/giaidoanbo")
def giaidoanbo(
    server: str = Query(..., description="T√™n server Mongo"),
    trai: str = Query(..., description="T√™n collection"),
    nhom_bo: str = Query(...),
    phan_loai: str = Query("T·∫•t c·∫£"),
    limit: int = Query(10)
):
    col = get_collection(server, trai)

    query = {}
    if nhom_bo != "T·∫•t c·∫£":
        query["NhomBo"] = nhom_bo
    if phan_loai != "T·∫•t c·∫£":
        query["PhanLoaiBo"] = phan_loai

    docs = list(col.find(query).limit(limit))

    results = []
    for d in docs:
        d["_id"] = str(d["_id"])
        bd = d.get("NgaySinh")
        age_days = get_age_days(bd)

        expected = classify_cow(d)
        actual = d.get("PhanLoaiBo")
        is_ok = (expected == actual)

        results.append({
            "_id": d["_id"],
            "KiemTra": "‚úÖ ƒê√∫ng" if is_ok else "‚ùå Sai",
            "SoTai": d.get("SoTai", ""),
            "NgaySinh": str(bd),
            "SoNgayTuoi": age_days,
            "GioiTinhBe": d.get("GioiTinhBe", ""),
            "SoNgayMangThai": d.get("SoNgayMangThai", ""),
            "NhomBo": d.get("NhomBo", ""),
            "PhanLoaiBo_DB": actual,
            "TenGiaiDoan_DB": stage_map.get(actual, "Kh√¥ng r√µ"),
            "PhanLoaiBo_Expected": expected,
            "TenGiaiDoan_Expected": stage_map.get(expected, "Kh√¥ng r√µ")
        })

    return results

def run_api():
    uvicorn.run(api_app, host="127.0.0.1", port=8000, log_level="error", timeout_keep_alive=120)

# Start FastAPI server in background thread
if "api_started" not in st.session_state:
    threading.Thread(target=run_api, daemon=True).start()
    st.session_state["api_started"] = True

# ========== STREAMLIT APP ==========
st.set_page_config(page_title="üêÑ Giai ƒëo·∫°n b√≤", layout="wide")
st.title("üêÑ Ki·ªÉm tra giai ƒëo·∫°n b√≤")

# ch·ªçn server Mongo
selected_server = st.selectbox("üîó Ch·ªçn Mongo Server:", list(MONGO_CONNECTIONS.keys()))

# ch·ªçn collection (tr·∫°i)
selected_trai = st.selectbox("üè† Ch·ªçn tr·∫°i:", list(TRAI_COLLECTIONS.keys()))

# ch·ªçn nh√≥m b√≤
group_options = ["T·∫•t c·∫£", "Bo", "Be", "BoChuyenVoBeo", "BoDucGiong"]
selected_group = st.selectbox("üêÇ Ch·ªçn nh√≥m b√≤:", group_options)

# ch·ªçn ph√¢n lo·∫°i
phanloai_options = [
    "T·∫•t c·∫£",
    "BeSinh", "BeTheoMe", "BeCaiSua", "BoHauBi",
    "BoNuoiThitBCT", "BoNuoiThitBCT8_12", "BoNuoiThitBCT18_20",
    "BoHauBiChoPhoi", "BoChoPhoi", "BoMoiPhoi",
    "BoMangThaiNho", "BoMangThaiLon", "BoChoDe",
    "BoMeNuoiConNho", "BoMeNuoiConLon",
    "BoVoBeoNho", "BoVoBeoLon", "BoDucChoBanThuongPham",
    "BoXuLySinhSan", "BoCachLy", "BoDucGiong"
]
selected_phanloai = st.selectbox("üìå Ch·ªçn ph√¢n lo·∫°i b√≤:", phanloai_options)

# ch·ªçn s·ªë l∆∞·ª£ng
limit = st.number_input("üìä S·ªë l∆∞·ª£ng records l·∫•y t·ª´ DB:", min_value=1, max_value=150000, value=10)

if st.button("üì° Ki·ªÉm tra d·ªØ li·ªáu"):
    with st.spinner("‚è≥ ƒêang g·ªçi API..."):
        params = {
            "server": selected_server,
            "trai": TRAI_COLLECTIONS[selected_trai],
            "nhom_bo": selected_group,
            "phan_loai": selected_phanloai,
            "limit": limit
        }
        try:
            res = requests.get("http://127.0.0.1:8000/giaidoanbo", params=params, timeout=120)
            if res.status_code == 200:
                data = res.json()
                st.success(f"‚úÖ L·∫•y {len(data)} b·∫£n ghi th√†nh c√¥ng")
                st.dataframe(pd.DataFrame(data), use_container_width=True)
            else:
                st.error(f"‚ùå L·ªói API: {res.status_code}")
        except Exception as e:
            st.error(f"‚ùå Kh√¥ng k·∫øt n·ªëi ƒë∆∞·ª£c API: {e}")
