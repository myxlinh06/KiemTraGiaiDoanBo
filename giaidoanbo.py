import os
from urllib.parse import quote_plus
from pymongo import MongoClient
import streamlit as st
from datetime import datetime

# ====== K·∫øt n·ªëi MongoDB ======
# def get_mongo_collection():
#     """K·∫øt n·ªëi t·ªõi MongoDB"""
#     uri = "mongodb://root:tgx2025@103.48.84.200:27017/"
#     client = MongoClient(uri, serverSelectionTimeoutMS=5000)
#     db = client["QuanLyTrangTraiDb"]
#     return db["collection_name"]
def get_mongo_collection(collection_name: str):
    """K·∫øt n·ªëi t·ªõi MongoDB v√† tr·∫£ v·ªÅ collection theo t√™n"""
    uri = "mongodb://root:tgx2025@103.48.84.200:27017/"
    client = MongoClient(uri, serverSelectionTimeoutMS=5000)
    db = client["QuanLyTrangTraiDb"]
    return db[collection_name]

# ====== Rule ph√¢n lo·∫°i ======
def classify_cow(doc):
    now = datetime.now()

    # --- Map field ---
    cow_id = str(doc.get("_id"))
    ear_tag = doc.get("SoTai", "")
    birth_date = None
    bd = doc.get("NgaySinh")
    if bd:
        if isinstance(bd, datetime):
            birth_date = bd
        elif isinstance(bd, str):
            try:
                birth_date = datetime.fromisoformat(bd)
            except Exception:
                birth_date = None

    gender = str(doc.get("GioiTinhBe", "")).lower()
    def safe_int(value, default=0):
        try:
            return int(value)
        except (ValueError, TypeError):
            return default

    pregnant_days = safe_int(doc.get("SoNgayMangThai", 0))

    group = doc.get("NhomBo", "")
    current_stage = doc.get("PhanLoaiBo", "")
    
    # --- T√≠nh s·ªë ng√†y tu·ªïi ---
    age_days = (now.date() - birth_date.date()).days + 1 if birth_date else None

    # ===== RULE =====
    if age_days is not None:

        # ==== GIAI ƒêO·∫†N B√ä ====
        if age_days <= 60:
            return "BeSinh"
        elif 60 < age_days <= 120:
            return "BeTheoMe"
        elif 120 < age_days <= 210:
            return "BeCaiSua"
        elif 210 < age_days <= 360:
            if gender == "ƒë·ª±c":
                return "BoNuoiThitBCT8_12"
            elif gender == "c√°i":
                return "BoHauBi"

        # ==== GIAI ƒêO·∫†N B√í H·∫¨U B·ªä ====
        if 360 < age_days <= 540:
            if gender == "ƒë·ª±c":
                return "BoNuoiThitBCT"
            elif gender == "c√°i" and pregnant_days ==0:
                return "BoHauBiChoPhoi"

        if 540 < age_days <= 600 and gender == "ƒë·ª±c":
            return "BoNuoiThitBCT18_20"

        # ==== V·ªñ B√âO ====
        if 600 < age_days <= 690:
            if gender == "ƒë·ª±c":
                return "BoVoBeoNho"
            if gender == "c√°i" and pregnant_days ==0:
                return "BoVoBeoNho"

        if 690 < age_days <= 720:
            if gender == "ƒë·ª±c":
                return "BoVoBeoLon"
            if gender == "c√°i" and pregnant_days ==0:
                return "BoVoBeoLon"

        if age_days > 720:
            if gender == "ƒë·ª±c":
                return "BoDucChoBanThuongPham"
            if gender == "c√°i" and pregnant_days == 0:
                return "BoCaiChoBanThuongPham"
            
    # ==== B√≤ m·∫π nu√¥i con / b√≤ mang thai / b√≤ ch·ªù ph·ªëi ====
    if gender == "c√°i":
        # Mang thai
        if pregnant_days > 0:
            if pregnant_days <= 210:
                return "BoMangThaiNho"
            elif pregnant_days <= 270:
                return "BoMangThaiLon"
            else:
                return "BoChoDe"

        # N·∫øu c√≥ th√¥ng tin sinh s·∫£n 
        tinh_trang = doc.get("TinhTrangSinhSan", "")
        sinh_san = doc.get("ThongTinSinhSans") or {}
        if not isinstance(sinh_san, dict):
            sinh_san = {}
        ngay_sinh_be = sinh_san.get("NgaySinh")
        
        x = None
        if ngay_sinh_be:
            try:
                if isinstance(ngay_sinh_be, str):
                    ngay_sinh_be = datetime.fromisoformat(ngay_sinh_be)
                x = (now - ngay_sinh_be).days + 1
            except Exception:
                x = None

        if x is not None:
            if 1 <= x <= 60:
                return "BoMeNuoiConNho"
            elif 60 < x <= 120:
                return "BoMeNuoiConLon"
            elif x > 120:
                if tinh_trang == "B√≤ ch·ªù ph·ªëi":
                    return "BoChoPhoi"
                elif tinh_trang == "B√≤ m·ªõi ph·ªëi":
                    return "BoMoiPhoi"
        else:
            # N·∫øu kh√¥ng c√≥ NgaySinh ho·∫∑c = 0 th√¨ x√©t theo t√¨nh tr·∫°ng sinh s·∫£n
            if tinh_trang == "B√≤ ch·ªù ph·ªëi":
                return "BoChoPhoi"
            elif tinh_trang == "B√≤ m·ªõi ph·ªëi":
                return "BoMoiPhoi"
        # N·∫øu kh√¥ng r∆°i v√†o c√°c case tr√™n ‚Üí b√≤ ch·ªù ph·ªëi m·∫∑c ƒë·ªãnh
        return "BoChoPhoi"

    
    # ==== NH√ìM ƒê·∫∂C BI·ªÜT ====
    if group == "BoXuLySinhSan":
        return "BoXuLySinhSan"
    if group == "BoCachLy":
        return "BoCachLy"
    if group == "BoDucGiong":
        return "BoDucGiong"
    return "KhongXacDinh"

# ===== Map PhanLoaiBo -> T√™n giai ƒëo·∫°n =====
stage_map = {
    "BeSinh": "B√™ theo m·∫π 0-2 th√°ng",
    "BeTheoMe": "B√™ theo m·∫π >2-4 th√°ng",
    "BeCaiSua": "B√™ cai s·ªØa >4-7 th√°ng",
    "BoNuoiThitBCT8_12": "B√™ ƒë·ª±c >7-12 th√°ng",
    "BoHauBi": "B√™ h·∫≠u b·ªã >7-12 th√°ng",
    "BoNuoiThitBCT": "B√≤ nu√¥i th·ªãt BCT >12-18 th√°ng",
    "BoHauBiChoPhoi": "B√≤ h·∫≠u b·ªã ch·ªù ph·ªëi >12-18 th√°ng",
    "BoNuoiThitBCT18_20": "B√≤ nu√¥i th·ªãt BCT >18-20 th√°ng",
    "BoChoPhoi": "B√≤ ch·ªù ph·ªëi",
    "BoMoiPhoi": "B√≤ m·ªõi ph·ªëi",
    "BoMangThaiNho": "BoÃÄ mang thai 2-7 thaÃÅng",
    "BoMangThaiLon": "BoÃÄ mang thai 8-9 thaÃÅng",
    "BoChoDe": "B√≤ ch·ªù ƒë·∫ª >9 th√°ng",
    "BoMeNuoiConNho": "BoÃÄ meÃ£ nu√¥i con 0-2 th√°ng",
    "BoMeNuoiConLon": "B√≤ m·∫π nu√¥i con >2-4 th√°ng",
    "BoVoBeoNho": "B√≤ v·ªó b√©o nh·ªè",
    "BoVoBeoLon": "B√≤ v·ªó b√©o l·ªõn",
    "BoDucChoBanThuongPham": "BoÃÄ v·ªó b√©o th∆∞∆°ng ph·∫©m",
    "BoCaiChoBanThuongPham": "BoÃÄ v·ªó b√©o th∆∞∆°ng ph·∫©m",
    "BoXuLySinhSan": "B√≤ x·ª≠ l√Ω sinh s·∫£n",
    "BoCachLy": "B√≤ c√°ch ly",
    "BoDucGiong": "ƒê·ª±c gi·ªëng",
    "KhongXacDinh": "Kh√¥ng x√°c ƒë·ªãnh"
}

# ====== Streamlit App ======
st.set_page_config(page_title="üêÑ Giai ƒëo·∫°n b√≤", layout="wide")
st.title("üêÑ Ki·ªÉm tra giai ƒëo·∫°n b√≤")
st.markdown("Tool ki·ªÉm tra d·ªØ li·ªáu b√≤ theo rule.")

# limit = st.number_input("S·ªë l∆∞·ª£ng records l·∫•y t·ª´ DB:", min_value=1, max_value=150000, value=10)

# ====== Selectbox ch·ªçn tr·∫°i ======
trai_options = {
    "Tr·∫°i IA PUCH": "BoNhapTrai",
    "Tr·∫°i EA H'LEO": "BoNhapTrai_1",
    "Tr·∫°i AD1": "BoNhapTrai_2",
    "Tr·∫°i ERC": "BoNhapTrai_3",
    "Tr·∫°i BSA": "BoNhapTrai_4",
}
selected_trai = st.selectbox("Ch·ªçn tr·∫°i:", list(trai_options.keys()))

# ====== Ch·ªçn nh√≥m b√≤ ======
group_options = ["Bo", "Be", "BoChuyenVoBeo", "BoDucGiong"]
selected_group = st.selectbox("Ch·ªçn nh√≥m b√≤:", group_options)

# ====== Ch·ªçn ph√¢n lo·∫°i b√≤ ======
phanloai_options = [
    "BeSinh", "BeTheoMe", "BeCaiSua", "BoHauBi",
    "BoNuoiThitBCT", "BoNuoiThitBCT8_12", "BoNuoiThitBCT18_20",
    "BoHauBiChoPhoi", "BoChoPhoi", "BoMoiPhoi",
    "BoMangThaiNho", "BoMangThaiLon", "BoChoDe",
    "BoMeNuoiConNho", "BoMeNuoiConLon",
    "BoVoBeoNho", "BoVoBeoLon", "BoDucChoBanThuongPham", "BoCaiChoBanThuongPham",
    "BoXuLySinhSan", "BoCachLy", "BoDucGiong"
]
selected_phanloai = st.selectbox("Ch·ªçn ph√¢n lo·∫°i b√≤:", ["T·∫•t c·∫£"] + phanloai_options)

# ====== Query DB ======
if st.button("Ki·ªÉm tra d·ªØ li·ªáu"):
    with st.spinner("ƒêang l·∫•y d·ªØ li·ªáu t·ª´ MongoDB..."):
        cows = get_mongo_collection(trai_options[selected_trai]) 

        query = {"NhomBo": selected_group}
        if selected_phanloai != "T·∫•t c·∫£":
            query["PhanLoaiBo"] = selected_phanloai

        docs = list(cows.find(query)) 


    results = []
    for d in docs:
        expected = classify_cow(d)
        actual = d.get("PhanLoaiBo")
        is_ok = (expected == actual)

        results.append({
    "_id": str(d.get("_id")),
    "SoTai": d.get("SoTai", ""),
    "NgaySinh": str(d.get("NgaySinh")),
    "GioiTinhBe": d.get("GioiTinhBe", ""),
    "SoNgayMangThai": d.get("SoNgayMangThai", ""),
    "NhomBo": d.get("NhomBo", ""),
    "PhanLoaiBo (DB)": actual,
    "TinhTrangSS (DB)": d.get("TinhTrangSinhSan", ""),
    "T√™n giai ƒëo·∫°n (DB)": stage_map.get(actual, "Kh√¥ng r√µ"),
    "PhanLoaiBo (Expected)": expected,
    "T√™n giai ƒëo·∫°n (Expected)": stage_map.get(expected, "Kh√¥ng r√µ"),
    "‚úÖ ƒê√∫ng/‚ùå Sai": "‚úÖ ƒê√∫ng" if expected == actual else "‚ùå Sai"
})


    st.subheader("üìã K·∫øt qu·∫£ ki·ªÉm tra")
    st.dataframe(results)
