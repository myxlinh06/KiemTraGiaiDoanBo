# app_full.py
import streamlit as st
import pandas as pd
import traceback
import requests
import threading
import uvicorn
from fastapi import FastAPI, Query
from pymongo import MongoClient
from datetime import datetime
from dateutil.relativedelta import relativedelta

# ================= Import logic ri√™ng ==================
from giaidoanbo import classify_cow, stage_map, get_age_days
from dudoangiaidoanbo import simulate_lifecycle, parse_date

# ================== CONFIG ==================
MONGO_CONNECTIONS = {
    "Server Test": "mongodb://root:tgx2025@103.48.84.200:27017/",
    "Server Dev": "mongodb://admin:tgx2025@103.48.84.199:27017/?authSource=admin",
}
DB_NAME = "QuanLyTrangTraiDb"
TRAI_COLLECTIONS = {
    "Tr·∫°i IA PUCH": "BoNhapTrai",
    "Tr·∫°i EA H'LEO": "BoNhapTrai_1",
    "Tr·∫°i AD1": "BoNhapTrai_2",
    "Tr·∫°i ERC": "BoNhapTrai_3",
    "Tr·∫°i BSA": "BoNhapTrai_4",
}

# Cache Mongo client connections
mongo_clients = {}
def get_collection(server_name: str, collection_name: str):
    if server_name not in mongo_clients:
        conn_str = MONGO_CONNECTIONS[server_name]
        mongo_clients[server_name] = MongoClient(conn_str, serverSelectionTimeoutMS=10000)
    client = mongo_clients[server_name]
    return client[DB_NAME][collection_name]

# ========== FASTAPI APP ==========
api_app = FastAPI(title="üêÑ API qu·∫£n l√Ω b√≤")

# --- API 1: Ki·ªÉm tra giai ƒëo·∫°n b√≤ ---
@api_app.get("/giaidoanbo")
def giaidoanbo(
    server: str = Query(...),
    trai: str = Query(...),
    nhom_bo: str = Query(...),
    phan_loai: str = Query("T·∫•t c·∫£"),
    limit: int = Query(10)
):
    col = get_collection(server, trai)
    query = {}
    if nhom_bo != "T·∫•t c·∫£":
        query["NhomBo"] = nhom_bo
    if phan_loai != "T·∫•t c·∫£":
        query["PhanLoaiBo"] = phan_loai
    docs = list(col.find(query).limit(limit))

    results = []
    for d in docs:
        d["_id"] = str(d["_id"])
        age_days = get_age_days(d.get("NgaySinh"))
        expected = classify_cow(d)
        actual = d.get("PhanLoaiBo")
        is_ok = (expected == actual)
        results.append({
            "_id": d["_id"],
            "KiemTra": "‚úÖ ƒê√∫ng" if is_ok else "‚ùå Sai",
            "SoTai": d.get("SoTai", ""),
            "NgaySinh": str(d.get("NgaySinh")),
            "SoNgayTuoi": age_days,
            "GioiTinhBe": d.get("GioiTinhBe", ""),
            "SoNgayMangThai": d.get("SoNgayMangThai", ""),
            "NhomBo": d.get("NhomBo", ""),
            "PhanLoaiBo_DB": actual,
            "TenGiaiDoan_DB": stage_map.get(actual, "Kh√¥ng r√µ"),
            "PhanLoaiBo_Expected": expected,
            "TenGiaiDoan_Expected": stage_map.get(expected, "Kh√¥ng r√µ")
        })
    return results

# --- API 2: D·ª± ƒëo√°n v√≤ng ƒë·ªùi ---
@api_app.get("/dudoangiaidoanbo")
def predict(
    server: str = Query(...),
    trai: str = Query(...),
    nhom_bo: str = Query(None),
    phan_loai: str = Query("T·∫•t c·∫£"),
    limit: int = Query(100, ge=1),
    so_tai: str = Query(None),
    target_date: str = Query(None)
):
    col = get_collection(server, trai)
    query = {}
    if nhom_bo:
        query["NhomBo"] = nhom_bo
    if phan_loai and phan_loai != "T·∫•t c·∫£":
        query["PhanLoaiBo"] = phan_loai
    if so_tai:
        lst = [s.strip() for s in so_tai.split(",") if s.strip()]
        if lst:
            query["SoTai"] = {"$in": lst}
    docs = list(col.find(query).limit(limit))

    if target_date:
        try:
            td = parse_date(target_date) or datetime.now()
        except:
            td = datetime.now()
    else:
        td = (datetime.now().replace(day=1) + relativedelta(months=6))

    res = []
    for d in docs:
        try:
            start = datetime.now().date().replace(day=1)
            end = td.date().replace(day=1)
            lifecycle = simulate_lifecycle(d, start, end, base_now=datetime.now())
        except Exception as e:
            lifecycle = {"error": str(e)}

        out = {
            "_id": str(d.get("_id")),
            "SoTai": d.get("SoTai"),
            "NgaySinh": str(d.get("NgaySinh")),
            "NhomBo": d.get("NhomBo"),
            "PhanLoaiBo": d.get("PhanLoaiBo"),
            "TenGiaiDoan_DB": stage_map.get(d.get("PhanLoaiBo"), d.get("PhanLoaiBo")),
            "Prediction": lifecycle
        }
        res.append(out)
    return {"count": len(res), "data": res}

# Run FastAPI in background thread
def run_api():
    uvicorn.run(api_app, host="127.0.0.1", port=8000, log_level="error", timeout_keep_alive=600)

if "api_started" not in st.session_state:
    threading.Thread(target=run_api, daemon=True).start()
    st.session_state["api_started"] = True

# ========== STREAMLIT APP ==========
st.set_page_config(page_title="üêÑ Qu·∫£n l√Ω giai ƒëo·∫°n b√≤", layout="wide")
st.title("üêÑ Giao di·ªán qu·∫£n l√Ω b√≤")

tab1, tab2 = st.tabs(["üì° Ki·ªÉm tra giai ƒëo·∫°n b√≤", "üîÆ D·ª± ƒëo√°n v√≤ng ƒë·ªùi"])

with tab1:
    selected_server = st.selectbox("üîó Ch·ªçn Mongo Server:", list(MONGO_CONNECTIONS.keys()))
    selected_trai = st.selectbox("üè† Ch·ªçn tr·∫°i:", list(TRAI_COLLECTIONS.keys()))
    selected_group = st.selectbox("üêÇ Ch·ªçn nh√≥m b√≤:", ["T·∫•t c·∫£", "Bo", "Be", "BoChuyenVoBeo", "BoDucGiong"])
    selected_phanloai = st.selectbox("üìå Ch·ªçn ph√¢n lo·∫°i b√≤:", ["T·∫•t c·∫£"] + list(stage_map.keys()))
    limit = st.number_input("üìä S·ªë l∆∞·ª£ng records:", min_value=1, max_value=100000, value=10)

    if st.button("üì° Ki·ªÉm tra d·ªØ li·ªáu"):
        params = {
            "server": selected_server,
            "trai": TRAI_COLLECTIONS[selected_trai],
            "nhom_bo": selected_group,
            "phan_loai": selected_phanloai,
            "limit": limit
        }
        
        
        try:
            res = requests.get("http://127.0.0.1:8000/giaidoanbo", params=params, timeout=600)
            if res.status_code == 200:
                data = res.json()
                st.success(f"‚úÖ L·∫•y {len(data)} b·∫£n ghi th√†nh c√¥ng")
                st.dataframe(pd.DataFrame(data), use_container_width=True)
            else:
                st.error(f"‚ùå L·ªói API: {res.status_code}, n·ªôi dung: {res.text}")
        except requests.exceptions.RequestException as req_err:
            st.error(f"‚ùå L·ªói Requests: {req_err}")
            st.text(traceback.format_exc())
        except Exception as e:
            st.error(f"‚ùå L·ªói kh√°c: {e}")
            st.text(traceback.format_exc())

with tab2:
    selected_server = st.selectbox("üîó Ch·ªçn Mongo Server (d·ª± ƒëo√°n):", list(MONGO_CONNECTIONS.keys()))
    selected_trai = st.selectbox("üè† Ch·ªçn tr·∫°i (d·ª± ƒëo√°n):", list(TRAI_COLLECTIONS.keys()))

    so_tai_input = st.text_area("Nh·∫≠p s·ªë tai (m·ªói s·ªë 1 d√≤ng ho·∫∑c c√°ch nhau d·∫•u ph·∫©y)")
    target_date = st.date_input("Ch·ªçn ng√†y ƒë√≠ch:", datetime.now().date() + relativedelta(months=6))

    if st.button("üîÆ D·ª± ƒëo√°n v√≤ng ƒë·ªùi"):
        so_tai = ",".join([s.strip() for s in so_tai_input.replace("\n", ",").split(",") if s.strip()])
        if not so_tai:
            st.warning("‚ö†Ô∏è Vui l√≤ng nh·∫≠p √≠t nh·∫•t 1 s·ªë tai!")
            st.stop()

        params = {
            "server": selected_server,
            "trai": TRAI_COLLECTIONS[selected_trai],
            "so_tai": so_tai,
            "limit": 200,  # limit l·ªõn ƒë·ªÉ kh√¥ng c·∫Øt m·∫•t
            "target_date": target_date.isoformat()
        }
        res = requests.get("http://127.0.0.1:8000/dudoangiaidoanbo", params=params, timeout=60)
        result = res.json()
        data = result["data"]

        if not data:
            st.warning("‚ùå Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu cho s·ªë tai ƒë√£ nh·∫≠p.")
            st.stop()

        st.dataframe(pd.DataFrame([{
            "SoTai": r["SoTai"],
            "PhanLoaiBo_DB": r["PhanLoaiBo"],
            "TenGiaiDoan_DB": r["TenGiaiDoan_DB"]
        } for r in data]), use_container_width=True)

        # b·∫£ng d·ª± ƒëo√°n theo th√°ng
        all_months = set()
        for r in data: all_months.update(r["Prediction"].keys())
        months_sorted = sorted(list(all_months), key=lambda s: datetime.strptime(s, "%m/%Y"))
        rows = []
        for r in data:
            row = {"SoTai": r["SoTai"]}
            for m in months_sorted:
                row[m] = stage_map.get(r["Prediction"].get(m, ""), "")
            rows.append(row)
        pred_df = pd.DataFrame(rows)
        st.subheader("üîÆ D·ª± ƒëo√°n giai ƒëo·∫°n theo th√°ng")
        st.dataframe(pred_df, use_container_width=True)

        csv = pred_df.to_csv(index=False).encode("utf-8")
        st.download_button("‚¨áÔ∏è T·∫£i CSV d·ª± ƒëo√°n", csv, "predictions.csv", "text/csv")
